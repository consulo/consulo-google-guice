to.purchase.a.commercial.license.please.visit=To purchase a commercial license, please visit
enter.license.key.for.GuiceyIDEA=Enter license key for GuiceyIDEA
review.license.terms=Review license terms
user.name=&User name
license.key=&License key
www.sixthandredriver.com=www.sixthandredriver.com
i.have.read.the.terms.of.this.license.and.i.accept.them=&I have read the terms of this license and I accept them
i.do.not.accept.the.terms.of.this.license=I &do not accept the terms of this license
enter.license.data.title=Enter GuiceyIDEA License Data
your.evaluation.license.will.expire.in.less.than.n.days=Your evaluation license for GuiceyIDEA will expire in less than {0} days.\n
license.renewal.needed=License renewal needed
license.entered=License Entered
license.expired=License Expired
to.purchase.a.license.for.the.latest.version.please.contact.sixth.and.red.river.software=To purchase a license for the latest version, please contact Sixth and Red River Software
to.purchase.a.new.license.please.contact.sixth.and.red.river.software=To purchase a new license, please contact Sixth and Red River Software
to.purchase.a.license.please.contact.sixth.and.red.river.software=To purchase a license for GuiceyIDEA, please contact Sixth and Red River Software
invalid.license.data=Invalid License Data
invalid.license.data.please.try.again=Invalid license data. Please, try again.
your.license.has.expired=Your GuiceyIDEA license has expired. \n
your.license.is.for.an.older.version.and.does.not.support.the.currently.installed.version=Your GuiceyIDEA license is for an older version, and does not support the currently installed version of GuiceyIDEA. \n
the.license.entered.is.for.another.product=The GuiceyIDEA license entered is for another product. \n
to.purchase.a.full.license.please.contact.sixth.and.red.river.software=To purchase a full license, please contact Sixth and Red River Software.
your.evaluation.license.will.expire.in.less.than.a.day.n=Your evaluation license for GuiceyIDEA will expire in less than a day.\n
your.evaluation.license.will.expire.in.one.day=Your evaluation license for GuiceyIDEA will expire in one day.\n
thank.you.for.supporting.sixth.and.red.river.software=Thank you for supporting Sixth and Red River Software
licensed.to=GuiceyIDEA licensed to:
conflicting.annotations.display.name=Conflicting Guice annotations
conflicting.annotations.problem.descriptor=Annotation #ref conflicts with other declared annotations #loc
multiple.binding.annotations.display.name=Multiple binding annotations on variable
multiple.binding.annotations.problem.descriptor=Variable #ref has multiple binding annotations #loc
binding.annotation.without.inject.display.name=Binding annotations without @Inject
binding.annotation.without.inject.problem.descriptor=Binding annotation #ref without @Inject declared #loc
interception.annotation.without.runtime.retention.display.name=Interception annotation without runtime retention
interception.annotation.without.runtime.retention.problem.descriptor=Annotation #ref does not have Runtime retention #loc
invalid.request.parameters.display.name=Incorrect type for @RequestParemeters parameters
invalid.request.parameters.problem.descriptor=Variables or parameters labeled #ref must have type Map<String, String[]> #loc
invalid.implemented.by.display.name=Invalid @ImplementedBy annotation
invalid.implemented.by.problem.descriptor=Class #ref doesn't implement annotated class #loc
singleton.injects.scoped.display.name=@Singleton component injects scoped component
singleton.injects.scoped.problem.descriptor=@Inject of scoped class #ref from @Singleton class #loc
session.scoped.injects.request.scoped.display.name=@SessionScoped component injects @RequestScoped component
session.scoped.injects.request.scoped.problem.descriptor=@Inject of @RequestScoped class #ref from @SessionScoped class #loc
invalid.provided.by.display.name=Invalid @ProvidedBy annotation
invalid.provided.by.problem.descriptor=Class #ref doesn't provide annotated class #loc
uninstantiable.implemented.by.class.display.name=Uninstantiable @ImplementedBy class
uninstantiable.implemented.by.class.problem.descriptor=Class #ref is uninstantiable, and thus can not be @ImplementedBy #loc
uninstantiable.provided.by.class.display.name=Uninstantiable @ProvidedBy class
uninstantiable.provided.by.class.problem.descriptor=Class #ref is uninstantiable, and thus can not be @ProvidedBy #loc
uninstantiable.binding.display.name=Uninstantiable binding
uninstantiable.binding.problem.descriptor=Class #ref is uninstantiable, and thus can not be bound #loc
redundant.to.binding.display.name=Redundant binding
redundant.to.binding.problem.descriptor=Binding to class #ref is redundant#loc
redundant.to.provider.binding.display.name=Redundant provider binding
redundant.to.provider.binding.problem.descriptor=Binding to class #ref is redundant #loc
redundant.scope.binding.display.name=Redundant scope binding
redundant.scope.binding.problem.descriptor=Binding to scope #ref is redundant #loc
pointless.binding.display.name=Pointless binding
pointless.binding.problem.descriptor=Binding is unnecessary, and can be removed #loc
unnecessary.static.injection.display.name=Unnecessary static injection
unnecessary.static.injection.problem.descriptor=Class #ref has no static @Inject members #loc
multiple.injected.constructors.for.class.display.name=Multiple @Inject constructors for class
multiple.injected.constructors.for.class.problem.descriptor=Class #ref has multiple @Inject constructors #loc
inject.of.non.public.member.display.name=@Inject of non-public field or method
inject.of.non.public.field.problem.descriptor=Non-public field #ref declared as @Inject #loc
inject.of.non.public.method.problem.descriptor=Non-public field #ref declared as @Inject #loc
move.binding.scope.to.class.text=Move binding scope to class
move.binding.scope.to.class.family.name=Move Binding Scope To Class
move.providedby.to.bindings.text=Move @ProvidedBy to bindings
move.providedby.to.bindings.family.name=Move ProvidedBy To Bindings
move.binding.to.class.text=Move binding class to class
move.binding.to.class.family.name=Move Binding To Class
move.provider.binding.to.class.text=Move provider binding to class
move.provider.binding.to.class.family.name=Move Provider Binding To Class
guice.intentions=Guice
new.guice.module.error=Cannot create Guice module
new.guice.module.command=Create Guice Module
new.guice.module.action.name=Create Guice module
new.guice.module.name=Creating Guice module: {0}.{1}
new.guice.scope.annotation.error=Cannot create Guice scope annotation
new.guice.scope.annotation.command=Create Guice Scope Annotation
new.guice.scope.annotation.action.name=Create Guice scope annotation
new.guice.scope.annotation.name=Creating Guice scope annotation: {0}.{1}
new.guice.binding.annotation.error=Cannot create Guice binding annotation
new.guice.binding.annotation.command=Create Guice Binding Annotation
new.guice.binding.annotation.action.name=Create Guice binding annotation
new.guice.binding.annotation.name=Creating Guice binding annotation: {0}.{1}
new.guice.method.interceptor.error=Cannot create Guice method interceptor
new.guice.method.interceptor.command=Create Guice Method Interceptor
new.guice.method.interceptor.action.name=Create Guice method interceptor
new.guice.method.interceptor.name=Creating Guice method interceptor: {0}.{1}
new.guice.provider.error=Cannot create Guice provider
new.guice.provider.command=Create Guice Provider
new.guice.provider.action.name=Create Guice provider
new.guice.provider.name=Creating Guice provider: {0}.{1}
toggle.injection.required.family.name=Toggle Injection Required
make.injection.optional=Make injection optional
make.injection.mandatory=Make injection mandatory
toggle.required=Toggle 'optional'
action.group.guice.title=Google Guice
action.group.guice.description=Created Google Guice components
delete.binding=Delete binding
make.public=Make public
select.provided.class=Select class to provide